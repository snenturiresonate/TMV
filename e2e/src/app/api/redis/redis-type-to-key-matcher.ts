import {RedisType} from './redis-type.model';

const TYPE_TO_KEY_PATTERN = [
  {pattern: new RegExp('\{last-berths-set\}-[a-zA-Z0-9-]+'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('\{path-extrapolation\}-[a-zA-Z0-9-]+'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('\{signalling-states\}-[a-zA-Z0-9-]+'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('access-plans'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('active-services'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('active-services-cache'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('actual-detailed-path-entries'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('actual-detailed-path-entry-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('actual-location-timings'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('actual-path-entries-updates'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('actual-train-running-information'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('additional-step-before'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('additional-step-before-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('additional-step-berths-set'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('area-rules'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('berth-steps'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('berth-translation'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('berth-translation-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('berth-to-maps-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('configuration-berths'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('configuration-location-groups-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('configuration-locations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('configuration-locations-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('current-punctuality-updates'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('last-berth-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('last-detailed-entries'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('last-manual-trust-berth'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('latch-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('line-code-to-path-code-rules-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('line-to-path-code-rules'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('location-groups'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('location-insertion-rules'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('location-insertion-rules-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-berth-clearing'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-matches'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berth-configurations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berth-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berths-cache'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berths-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berths-last-message-id'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berths-terminations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('manual-trust-berths'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('map-configurations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('map-configurations-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('map-group-configurations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('map-group-configurations-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('map-mtb-mapping'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('map-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('path-extrap-cancel-cache-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('path-extrap-rules-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('path-extrapolation-locations-cache'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('path-rules'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('path-to-line-code-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('path-to-line-code-rules'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('predicted-detailed-path'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('predicted-detailed-path-request'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('predicted-path-entries'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('q-berths'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('qberth-translation'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('qberth-translation-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('railway-undertaking-configuration'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('railway-undertaking-configuration-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('railway-undertaking-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('route-expression-config'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('route-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('schedule-current-berth'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('schedule-documents-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('schedule-matching'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('schedule-modification-rules-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('signal-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('signalling-function-config'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('signalling-states-service'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('signalling-updates'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('states-punctuality'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('step-translation'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('step-translation-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('swap-description'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('swap-description-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('terminated-services'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('termination-recalculation-set'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('terminations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('track-division-route-states'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('track-route-config'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-activations'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-describer-updates'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-describers-configuration-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-journey-modifications'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-journey-modifications-train-id'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-running-information'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('train-service-code-configuration'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('unmatched-service-documents-hash'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('unprocessed'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('unscheduled-services'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('vstps'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('\{schedule-matching\}-berth-level-schedules-cache'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('\{schedule-matching\}-[a-zA-Z0-9-]+'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('agreed-associations'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('agreed-schedules'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('berth-level-schedule-pairs'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('berth-level-schedules'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('current-schedules'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('enriched-schedules'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('last-processed-access-plan'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('path-extrap-enriched-schedules'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('schedule'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('schedule-modifications'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('schedules-hash-\d{4}-\d{2}-\d{2}'), type: RedisType.SCHEDULES},
  {pattern: new RegExp('manual-trust-berth-states'), type: RedisType.REPLAY},
  {pattern: new RegExp('train-describer-[A-Z0-9]{2}'), type: RedisType.REPLAY},
  {pattern: new RegExp('train-describer-state-[A-Z0-9]{2}'), type: RedisType.REPLAY},
  {pattern: new RegExp('trains-list-updates'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('restriction-events-[a-zA-Z0-9-]+'), type: RedisType.OPERATIONS},
  {pattern: new RegExp('restriction-snapshots-[a-zA-Z0-9-]+'), type: RedisType.OPERATIONS}
];

export class RedisTypeToKeyMatcher {
  private readonly typeToKeyPatterns: PatternTypePair[] = TYPE_TO_KEY_PATTERN;
  public match(key: string): RedisType {
    const patternPair = this.typeToKeyPatterns.find(pair => pair.pattern.test(key));
    if (!patternPair) {
      return undefined;
    }
    return patternPair.type;
  }
}

export interface PatternTypePair {
  pattern: RegExp;
  type: RedisType;
}
